apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'


jacoco {
    toolVersion = "$jacoco_version"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

def report = "${rootProject.buildDir}/coverage-report"

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest'/*, 'createDebugCoverageReport'*/]) {

    group "Reporting"
    description "Generate Jacoco coverage reports."

    reports {
        xml.enabled = true
        html.enabled = true
        xml.destination file(report)
        xml.destination file("${report}/report.xml")
    }

    def javaClasses = []
    def kotlinClasses = []
    def javaSrc = []
    def kotlinSrc = []
    def execution = []

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*', '**/di/*.*']

    rootProject.subprojects.each { proj ->
        javaClasses << fileTree(dir: "$proj.buildDir/intermediates/classes/debug", excludes: fileFilter)
        kotlinClasses << fileTree(dir: "$proj.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
        javaSrc << "$proj.projectDir/src/main/java"
        kotlinSrc << "$proj.projectDir/src/main/kotlin"
        execution << fileTree(dir: proj.buildDir,
                includes: ['jacoco/testDebugUnitTest.exec',
                           'outputs/code-coverage/connected/*coverage.ec'])
    }

    sourceDirectories = files([javaSrc, kotlinSrc])
    classDirectories = files([javaClasses, kotlinClasses])

    executionData = files(execution)

    doLast() {
        print "file://${reports.html.destination}/index.html"
    }
}

coveralls {
    def kotlinSrc = []
    rootProject.subprojects.each { proj ->
        kotlinSrc << "$proj.projectDir/src/main/kotlin"
    }

    sourceDirs = files(kotlinSrc).files.absolutePath
    print sourceDirs
    jacocoReportPath = "${report}/report.xml"
}