version: 2
jobs:
  build:
    working_directory: ~/meal
    docker:
      # Android the primary container
      - image: circleci/android:api-28-alpha
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Run UnitTests and generate Code Coverage
          command: ./gradlew jacocoTestReport --stacktrace
      - run:
          name: Upload code coverage data
          command: ./gradlew coveralls --stacktrace
      - run:
          name: Assemble APKs
          command: ./gradlew  assembleDebug assembleDebugAndroidTest
      - run:
          name: Dump Google Cloud Credentials to file
          command: echo ${GOOGLE_AUTH} > ${HOME}/gcp-key.json
      - run: gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
      - run: gcloud --quiet config set project ${FIREBASE_PROJECT_ID}
      - run:
          name: Configure environment
          command: |
            echo 'export APK_PATH=`find . -path "*.apk" ! -path "*unaligned.apk" ! -path "*Test*.apk" -print -quit`' >> $BASH_ENV
            echo 'export TEST_APK_PATH=`find "." "-path" "*Test*.apk" -print -quit`' >> $BASH_ENV
      - run:
          name: Run UI Tests
          command: gcloud firebase test android run
                    --type instrumentation
                    --app ${APK_PATH}
                    --test ${TEST_APK_PATH}
                    --device model=sailfish,version=26,locale=en,orientation=portrait
                    --environment-variables coverage=true, coverageFile=/sdcard/tmp/code-coverage/connected/coverage.ec
                    --directories-to-pull=/sdcard/tmp
                    --timeout 30m

       - run:
            name: Install gsutil dependency and copy test results data
            command: |
                sudo pip install -U crcmod
                sudo gsutil -m cp -r -U `sudo gsutil ls gs://test-lab-987-654 | tail -1` ${CIRCLE_ARTIFACTS}/ | true
          no_output_timeout: 30m
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_test_results:
          path: app/build/test-results


